#!/usr/bin/env python3

import os
import mediaplayer
import dbus

# the code has to respond to dbus methods and also to whenever the fifo is written two
# how do i make respond to both in a pythonic way


class pianoPlayer(mediaplayer.mediaPlayer):
    def __init__(self, loop):
        super().__init__()
        self.lastCmd = None
        self.properties["org.mpris.MediaPlayer2.Player"]["CanPlay"] = True
        self.properties["org.mpris.MediaPlayer2.Player"]["CanPause"] = True
        self.properties["org.mpris.MediaPlayer2.Player"]["CanControl"] = True
        self.properties["org.mpris.MediaPlayer2.Player"]["CanGoNext"] = True
        self.properties["org.mpris.MediaPlayer2"]["CanQuit"] = True
        self.properties["org.mpris.MediaPlayer2"]["Identity"] = "pianobar"

        self.loop = loop

    def setLast(self, cmd):
        print(cmd)
        ctrlCmds = [
            b"songstart\n",
            b"songfinish\n",
            b"userlogin\n",
            b"usergetstations\n",
            b"stationfetchplayerlist\n",
        ]

        if self.lastCmd == b"songstart\n":
            self.updateMeta(cmd)

        self.lastCmd = cmd

    def updateMeta(self, cmd):
        interface = "org.mpris.MediaPlayer2.Player"
        propertyName = "PlaybackStatus"

        self.properties[interface][propertyName] = "Playing"
        self.PropertiesChanged(interface, {propertyName: "Playing"}, [])

        strCmd = cmd.decode("utf-8").split("\n")
        # print(strCmd)

        propertyName = "Metadata"

        newMeta = {
            "mpris:trackid": dbus.ObjectPath(
                "/path/to/bogus/id/that/does/not/exist", variant_level=1
            )
        }

        for dFrag in strCmd:
            key, *val = dFrag.split("=")
            if key == "artist":
                newMeta["xesam:artist"] = dbus.Array(
                    [dbus.String(val[0])], variant_level=1
                )
            if key == "title":
                newMeta["xesam:title"] = dbus.String(val[0], variant_level=1)
            if key == "album":
                newMeta["xesam:album"] = dbus.String(val[0], variant_level=1)
        # print(newMeta)

        self.properties[interface][propertyName] = newMeta
        self.PropertiesChanged(interface, {propertyName: newMeta}, [])

    @dbus.service.method("org.mpris.MediaPlayer2.Player")
    def Play(self):
        os.system("echo P > ~/.config/pianobar/ctl")

    @dbus.service.method("org.mpris.MediaPlayer2.Player")
    def Pause(self):
        os.system("echo S > ~/.config/pianobar/ctl")

    @dbus.service.method("org.mpris.MediaPlayer2.Player")
    def PlayPause(self):
        os.system("echo p > ~/.config/pianobar/ctl")

    @dbus.service.method("org.mpris.MediaPlayer2.Player")
    def Next(self):
        os.system("echo n > ~/.config/pianobar/ctl")

    @dbus.service.method("org.mpris.MediaPlayer2")
    def Quit(self):
        os.system("echo q > ~/.config/pianobar/ctl")
        self.loop.quit()


def readFifo(fifo, unsure, player):
    dat = os.read(fifo, 4096)
    player.setLast(dat)
    return True


def main():
    tv=os.path.dirname(os.path.realpath(__file__))
    os.system(tv+"/start-pianobar.sh")

    import dbus.mainloop.glib
    from gi.repository import GLib

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    loop = GLib.MainLoop()
    fifo = os.open(
        os.getenv("HOME") + "/.config/pianobar/media", os.O_RDWR | os.O_NONBLOCK
    )
    player = pianoPlayer(loop)
    GLib.io_add_watch(fifo, GLib.IO_IN, readFifo, player)
    loop.run()


if __name__ == "__main__":
    main()
